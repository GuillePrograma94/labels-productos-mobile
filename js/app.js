/**
 * Aplicaci√≥n principal m√≥vil para Labels Productos
 * Coordina la inicializaci√≥n y funcionamiento de todos los m√≥dulos
 */

class MobileApp {
    constructor() {
        this.isInitialized = false;
        this.isOnline = navigator.onLine;
        this.config = null;
        
        // Estado de la aplicaci√≥n
        this.state = {
            productsLoaded: false,
            codesLoaded: false,
            lastSync: null,
            totalProducts: 0,
            totalCodes: 0
        };
    }

    /**
     * Inicializa la aplicaci√≥n
     */
    async initialize() {
        try {
            console.log('üöÄ Iniciando aplicaci√≥n m√≥vil...');
            
            // Mostrar pantalla de carga
            window.ui.showLoading('Iniciando aplicaci√≥n...');
            window.ui.updateSyncStatus('connecting', 'Iniciando...');
            
            // Inicializar m√≥dulos base
            await this.initializeModules();
            
            // Cargar configuraci√≥n
            await this.loadConfiguration();
            
            // Sincronizar datos
            await this.performInitialSync();
            
            // Inicializar UI
            this.initializeUI();
            
            // Configurar eventos de conectividad
            this.setupConnectivityHandlers();
            
            // Marcar como inicializada
            this.isInitialized = true;
            
            // Ocultar pantalla de carga
            window.ui.hideLoading();
            window.ui.updateSyncStatus('connected', 'Listo');
            
            console.log('‚úÖ Aplicaci√≥n inicializada correctamente');
            window.ui.showToast('Aplicaci√≥n lista para usar', 'success');

        } catch (error) {
            console.error('‚ùå Error al inicializar aplicaci√≥n:', error);
            this.handleInitializationError(error);
        }
    }

    /**
     * Inicializa los m√≥dulos base
     */
    async initializeModules() {
        window.ui.updateProgress(0.1, 'Inicializando almacenamiento...');
        
        // Inicializar almacenamiento local
        await window.storageManager.initialize();
        
        window.ui.updateProgress(0.2, 'Inicializando interfaz...');
        
        // Inicializar UI
        window.ui.initialize();
        
        console.log('‚úÖ M√≥dulos base inicializados');
    }

    /**
     * Carga la configuraci√≥n de la aplicaci√≥n
     */
    async loadConfiguration() {
        window.ui.updateProgress(0.3, 'Cargando configuraci√≥n...');
        
        try {
            // Cargar configuraci√≥n de Supabase desde el servidor
            const configLoaded = await window.CONFIG.loadSupabaseConfig();
            
            if (!configLoaded) {
                throw new Error('No se pudo cargar la configuraci√≥n de Supabase desde el servidor');
            }
            
            // Cargar configuraci√≥n local guardada
            const localConfig = await window.storageManager.getAllConfig();
            
            // Combinar configuraciones
            this.config = {
                ...localConfig,
                supabaseUrl: window.CONFIG.SUPABASE.url,
                supabaseKey: window.CONFIG.SUPABASE.anonKey
            };
            
            console.log('üîç Configuraci√≥n final:', {
                supabaseUrl: this.config.supabaseUrl ? 'Configurada ‚úÖ' : 'Faltante ‚ùå',
                supabaseKey: this.config.supabaseKey ? 'Configurada ‚úÖ' : 'Faltante ‚ùå'
            });
            
            // Guardar configuraci√≥n actualizada localmente
            await window.storageManager.saveConfig('supabaseUrl', this.config.supabaseUrl);
            await window.storageManager.saveConfig('supabaseKey', this.config.supabaseKey);
            
            console.log('‚úÖ Configuraci√≥n cargada desde servidor y almacenada localmente');
        } catch (error) {
            console.error('‚ùå Error al cargar configuraci√≥n:', error);
            
            // Intentar usar configuraci√≥n local como fallback
            const localConfig = await window.storageManager.getAllConfig();
            if (localConfig.supabaseUrl && localConfig.supabaseKey) {
                console.log('‚ö†Ô∏è Usando configuraci√≥n local como fallback');
                this.config = localConfig;
            } else {
                throw new Error('No hay configuraci√≥n de Supabase disponible');
            }
        }
    }

    /**
     * Realiza la sincronizaci√≥n inicial de datos
     */
    async performInitialSync() {
        try {
            // Verificar si hay datos locales
            const stats = await window.storageManager.getStorageStats();
            
            if (stats.productos > 0 && stats.codigos_secundarios > 0) {
                // Hay datos locales, verificar si necesita actualizaci√≥n
                console.log(`üìä Datos locales: ${stats.productos} productos, ${stats.codigos_secundarios} c√≥digos`);
                
                this.state.productsLoaded = true;
                this.state.codesLoaded = true;
                this.state.totalProducts = stats.productos;
                this.state.totalCodes = stats.codigos_secundarios;
                this.state.lastSync = stats.ultima_sincronizacion;
                
                window.ui.updateProductsCount(stats.productos);
                window.ui.updateProgress(0.9, 'Datos locales cargados');
                
                // Verificar si necesita actualizaci√≥n
                if (this.isOnline) {
                    try {
                        await window.supabaseClient.initialize(this.config);
                        const versionCheck = await window.supabaseClient.verificarActualizacionNecesaria();
                        
                        if (versionCheck.necesitaActualizacion) {
                            console.log('üìä Actualizaci√≥n disponible, sincronizando en segundo plano...');
                            window.ui.updateSyncStatus('syncing', 'Actualizando datos...');
                            this.performBackgroundSync();
                        } else {
                            console.log('‚úÖ Datos actualizados');
                            window.ui.updateSyncStatus('connected', 'Actualizado');
                        }
                    } catch (error) {
                        console.log('‚ö†Ô∏è Error verificando versi√≥n, usando datos locales');
                        window.ui.updateSyncStatus('offline', 'Modo offline');
                    }
                } else {
                    window.ui.updateSyncStatus('offline', 'Sin conexi√≥n');
                }
            } else {
                // No hay datos locales, necesita descarga inicial
                await this.performFullSync();
            }
            
        } catch (error) {
            console.error('‚ùå Error en sincronizaci√≥n inicial:', error);
            
            // Si hay datos locales, continuar sin sincronizaci√≥n
            const stats = await window.storageManager.getStorageStats();
            if (stats.productos > 0) {
                console.log('‚ö†Ô∏è Continuando con datos locales');
                this.state.productsLoaded = true;
                this.state.totalProducts = stats.productos;
                window.ui.updateProductsCount(stats.productos);
                window.ui.updateSyncStatus('offline', 'Modo offline');
            } else {
                throw new Error('No hay datos disponibles y no se puede sincronizar');
            }
        }
    }

    /**
     * Realiza una sincronizaci√≥n completa
     */
    async performFullSync() {
        window.ui.updateProgress(0.4, 'Conectando con servidor...');
        
        try {
            // Inicializar cliente Supabase
            await window.supabaseClient.initialize(this.config);
            
            window.ui.updateProgress(0.5, 'Descargando productos...');
            
            // Descargar productos
            const productos = await window.supabaseClient.downloadProducts((progress) => {
                const progressValue = 0.5 + (progress.loaded / (progress.total || progress.loaded)) * 0.2;
                window.ui.updateProgress(progressValue, `Descargando productos: ${progress.loaded.toLocaleString()}`);
            });
            
            window.ui.updateProgress(0.7, 'Descargando c√≥digos secundarios...');
            
            // Descargar c√≥digos secundarios
            const codigos = await window.supabaseClient.downloadSecondaryCodes((progress) => {
                const progressValue = 0.7 + (progress.loaded / (progress.total || progress.loaded)) * 0.15;
                window.ui.updateProgress(progressValue, `Descargando c√≥digos: ${progress.loaded.toLocaleString()}`);
            });
            
            window.ui.updateProgress(0.85, 'Guardando datos localmente...');
            
            // Guardar datos localmente
            await window.storageManager.saveProducts(productos);
            await window.storageManager.saveSecondaryCodes(codigos);
            
            // Actualizar estado
            this.state.productsLoaded = true;
            this.state.codesLoaded = true;
            this.state.totalProducts = productos.length;
            this.state.totalCodes = codigos.length;
            this.state.lastSync = new Date().toISOString();
            
            // Guardar timestamp de sincronizaci√≥n
            await window.storageManager.saveConfig('lastSync', this.state.lastSync);
            
            // Actualizar versi√≥n local
            const versionCheck = await window.supabaseClient.verificarActualizacionNecesaria();
            if (versionCheck.versionRemota) {
                await window.supabaseClient.actualizarVersionLocal(versionCheck.versionRemota);
            }
            
            window.ui.updateProductsCount(productos.length);
            window.ui.updateProgress(1.0, 'Sincronizaci√≥n completada');
            
            console.log(`‚úÖ Sincronizaci√≥n completa: ${productos.length} productos, ${codigos.length} c√≥digos`);
            
        } catch (error) {
            console.error('‚ùå Error en sincronizaci√≥n completa:', error);
            throw error;
        }
    }

    /**
     * Realiza sincronizaci√≥n en segundo plano
     */
    async performBackgroundSync() {
        try {
            console.log('üîÑ Iniciando sincronizaci√≥n en segundo plano...');
            
            // Inicializar cliente Supabase si no est√° inicializado
            if (!window.supabaseClient.isConnected) {
                await window.supabaseClient.initialize(this.config);
            }
            
            // Limpiar listas expiradas
            await window.supabaseClient.cleanupExpiredLists();
            
            // Aqu√≠ se podr√≠a implementar verificaci√≥n de actualizaciones
            // Por ahora solo limpiamos listas expiradas
            
            console.log('‚úÖ Sincronizaci√≥n en segundo plano completada');
            
        } catch (error) {
            console.error('‚ö†Ô∏è Error en sincronizaci√≥n en segundo plano:', error);
            // No es cr√≠tico, continuar normalmente
        }
    }

    /**
     * Inicializa la interfaz de usuario
     */
    initializeUI() {
        // La UI ya est√° inicializada, solo actualizar estado
        window.ui.updateProductsCount(this.state.totalProducts);
        
        if (this.state.lastSync) {
            const lastSyncDate = new Date(this.state.lastSync);
            const timeAgo = this.getTimeAgo(lastSyncDate);
            window.ui.updateSyncStatus('connected', `√öltima sync: ${timeAgo}`);
        }
    }

    /**
     * Configura manejadores de conectividad
     */
    setupConnectivityHandlers() {
        // Detectar cambios de conectividad
        window.addEventListener('online', () => {
            this.isOnline = true;
            console.log('üåê Conexi√≥n restaurada');
            window.ui.updateSyncStatus('connected', 'Conectado');
            window.ui.showToast('Conexi√≥n restaurada', 'success');
            
            // Intentar sincronizaci√≥n autom√°tica
            this.performBackgroundSync();
        });

        window.addEventListener('offline', () => {
            this.isOnline = false;
            console.log('üì¥ Conexi√≥n perdida');
            window.ui.updateSyncStatus('offline', 'Sin conexi√≥n');
            window.ui.showToast('Trabajando sin conexi√≥n', 'warning');
        });

        // Detectar cuando la app vuelve a estar visible
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && this.isOnline) {
                // App visible y online, verificar si necesita sync
                this.checkForUpdates();
            }
        });
    }

    /**
     * Verifica si hay actualizaciones disponibles
     */
    async checkForUpdates() {
        try {
            if (!this.state.lastSync) return;
            
            const lastSync = new Date(this.state.lastSync);
            const now = new Date();
            const hoursSinceSync = (now - lastSync) / (1000 * 60 * 60);
            
            // Si han pasado m√°s de 4 horas, sugerir actualizaci√≥n
            if (hoursSinceSync > 4) {
                console.log('‚è∞ Verificando actualizaciones...');
                // Aqu√≠ se podr√≠a implementar verificaci√≥n de versi√≥n remota
                // Por ahora solo mostrar notificaci√≥n
                window.ui.showToast('Datos pueden estar desactualizados', 'warning');
            }
            
        } catch (error) {
            console.error('Error al verificar actualizaciones:', error);
        }
    }

    /**
     * Maneja errores de inicializaci√≥n
     */
    handleInitializationError(error) {
        window.ui.hideLoading();
        window.ui.updateSyncStatus('error', 'Error de inicializaci√≥n');
        
        let message = 'Error al inicializar la aplicaci√≥n';
        let canContinue = false;
        
        if (error.message.includes('configuraci√≥n')) {
            message = 'Error en la configuraci√≥n. Verifique los datos de conexi√≥n.';
        } else if (error.message.includes('datos disponibles')) {
            message = 'No hay datos disponibles. Verifique su conexi√≥n a internet.';
        } else if (error.message.includes('Supabase')) {
            message = 'Error de conexi√≥n con el servidor. Intente m√°s tarde.';
            canContinue = true; // Podr√≠a tener datos locales
        }
        
        // Mostrar error
        window.ui.showToast(message, 'error', 10000);
        
        // Si puede continuar, intentar cargar datos locales
        if (canContinue) {
            this.tryLoadLocalData();
        } else {
            // Mostrar pantalla de error
            this.showErrorScreen(message);
        }
    }

    /**
     * Intenta cargar datos locales como fallback
     */
    async tryLoadLocalData() {
        try {
            const stats = await window.storageManager.getStorageStats();
            
            if (stats.productos > 0) {
                console.log('üì± Cargando datos locales como fallback');
                
                this.state.productsLoaded = true;
                this.state.totalProducts = stats.productos;
                this.state.lastSync = stats.ultima_sincronizacion;
                
                window.ui.updateProductsCount(stats.productos);
                window.ui.updateSyncStatus('offline', 'Modo offline');
                window.ui.showToast('Trabajando con datos locales', 'warning');
                
                this.isInitialized = true;
            } else {
                this.showErrorScreen('No hay datos disponibles para trabajar offline');
            }
            
        } catch (error) {
            console.error('Error al cargar datos locales:', error);
            this.showErrorScreen('Error al acceder a los datos locales');
        }
    }

    /**
     * Muestra pantalla de error
     */
    showErrorScreen(message) {
        document.getElementById('mainContent').innerHTML = `
            <div style="text-align: center; padding: 2rem;">
                <h2>‚ùå Error</h2>
                <p>${message}</p>
                <button onclick="location.reload()" class="action-btn primary" style="margin-top: 1rem;">
                    üîÑ Reintentar
                </button>
            </div>
        `;
        
        document.getElementById('mainContent').style.display = 'block';
    }

    /**
     * Obtiene tiempo transcurrido en formato legible
     */
    getTimeAgo(date) {
        const now = new Date();
        const diff = now - date;
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        
        if (days > 0) return `hace ${days} d√≠a${days !== 1 ? 's' : ''}`;
        if (hours > 0) return `hace ${hours} hora${hours !== 1 ? 's' : ''}`;
        if (minutes > 0) return `hace ${minutes} minuto${minutes !== 1 ? 's' : ''}`;
        return 'hace un momento';
    }

    /**
     * Fuerza una sincronizaci√≥n manual
     */
    async forceSyncronization() {
        if (!this.isOnline) {
            window.ui.showToast('No hay conexi√≥n a internet', 'error');
            return;
        }

        try {
            window.ui.updateSyncStatus('syncing', 'Sincronizando...');
            window.ui.showToast('Iniciando sincronizaci√≥n...', 'info');
            
            await this.performFullSync();
            
            window.ui.updateSyncStatus('connected', 'Sincronizado');
            window.ui.showToast('Sincronizaci√≥n completada', 'success');
            
        } catch (error) {
            console.error('Error en sincronizaci√≥n manual:', error);
            window.ui.updateSyncStatus('error', 'Error en sync');
            window.ui.showToast('Error al sincronizar: ' + error.message, 'error');
        }
    }

    /**
     * Obtiene estad√≠sticas de la aplicaci√≥n
     */
    getAppStats() {
        return {
            initialized: this.isInitialized,
            online: this.isOnline,
            productsLoaded: this.state.productsLoaded,
            totalProducts: this.state.totalProducts,
            totalCodes: this.state.totalCodes,
            lastSync: this.state.lastSync
        };
    }
}

// Inicializar aplicaci√≥n cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', async () => {
    // Crear instancia global de la aplicaci√≥n
    window.mobileApp = new MobileApp();
    
    try {
        // Inicializar aplicaci√≥n
        await window.mobileApp.initialize();
    } catch (error) {
        console.error('Error fatal al inicializar:', error);
    }
});

// Registrar Service Worker para PWA (opcional)
// Deshabilitado por ahora ya que no tenemos sw.js
/*
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
            .then(registration => {
                console.log('‚úÖ Service Worker registrado');
            })
            .catch(error => {
                console.log('‚ùå Error al registrar Service Worker:', error);
            });
    });
}
*/
