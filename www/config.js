/**
 * Configuraci√≥n de la aplicaci√≥n m√≥vil
 * Obtiene las credenciales desde el servidor (variables de entorno)
 */

// Las credenciales de Supabase se cargar√°n din√°micamente desde el servidor
let SUPABASE_CONFIG = {
    url: '',
    anonKey: ''
};

// Configuraci√≥n de la aplicaci√≥n
const APP_CONFIG = {
    // Nombre de la aplicaci√≥n
    name: 'Labels Productos - M√≥vil',
    
    // Versi√≥n de la aplicaci√≥n
    version: '1.0.0',
    
    // Configuraci√≥n de sincronizaci√≥n
    sync: {
        // Intervalo de sincronizaci√≥n autom√°tica en minutos
        autoSyncInterval: 240, // 4 horas
        
        // Tama√±o de lote para descargas
        batchSize: 1000,
        
        // Timeout para operaciones de red en milisegundos
        networkTimeout: 30000, // 30 segundos
        
        // Reintentos autom√°ticos
        maxRetries: 3
    },
    
    // Configuraci√≥n de b√∫squeda
    search: {
        // M√≠nimo de caracteres para b√∫squeda
        minSearchLength: 2,
        
        // M√°ximo de resultados por b√∫squeda
        maxResults: 50,
        
        // Delay para b√∫squeda en tiempo real (ms)
        debounceDelay: 300
    },
    
    // Configuraci√≥n de listas temporales
    temporaryLists: {
        // Tiempo de expiraci√≥n en horas
        expirationHours: 24,
        
        // M√°ximo de productos por lista
        maxProductsPerList: 100,
        
        // Longitud del c√≥digo de acceso
        codeLength: 6
    },
    
    // Configuraci√≥n de UI
    ui: {
        // Duraci√≥n de notificaciones toast en ms
        toastDuration: 3000,
        
        // Animaciones habilitadas
        animationsEnabled: true,
        
        // Tema por defecto
        defaultTheme: 'light'
    },
    
    // Configuraci√≥n de almacenamiento local
    storage: {
        // Nombre de la base de datos IndexedDB
        dbName: 'LabelsProductosDB',
        
        // Versi√≥n de la base de datos
        dbVersion: 1,
        
        // Tiempo de cach√© en milisegundos
        cacheTimeout: 86400000 // 24 horas
    }
};

// Configuraci√≥n de desarrollo/producci√≥n
const ENV_CONFIG = {
    // Modo de desarrollo
    development: {
        debug: true,
        logLevel: 'debug',
        mockData: false
    },
    
    // Modo de producci√≥n
    production: {
        debug: false,
        logLevel: 'error',
        mockData: false
    }
};

// Detectar entorno actual
const isDevelopment = window.location.hostname === 'localhost' || 
                     window.location.hostname === '127.0.0.1' ||
                     window.location.hostname.includes('192.168.');

const currentEnv = isDevelopment ? 'development' : 'production';

/**
 * Carga la configuraci√≥n de Supabase desde el servidor
 */
async function loadSupabaseConfig() {
    try {
        const response = await fetch('/api/config');
        if (response.ok) {
            const config = await response.json();
            SUPABASE_CONFIG.url = config.SUPABASE_URL;
            SUPABASE_CONFIG.anonKey = config.SUPABASE_ANON_KEY;
            
            console.log('‚úÖ Configuraci√≥n de Supabase cargada desde servidor:', {
                url: config.SUPABASE_URL ? 'Configurada ‚úÖ' : 'Faltante ‚ùå',
                key: config.SUPABASE_ANON_KEY ? 'Configurada ‚úÖ' : 'Faltante ‚ùå'
            });
            return true;
        } else {
            throw new Error('No se pudo obtener configuraci√≥n del servidor');
        }
    } catch (error) {
        console.error('‚ùå Error al cargar configuraci√≥n:', error);
        return false;
    }
}

// Exportar configuraci√≥n
window.CONFIG = {
    SUPABASE: SUPABASE_CONFIG,
    APP: APP_CONFIG,
    ENV: ENV_CONFIG[currentEnv],
    IS_DEVELOPMENT: isDevelopment,
    loadSupabaseConfig: loadSupabaseConfig
};

// Logging condicional
if (window.CONFIG.ENV.debug) {
    console.log('üîß Configuraci√≥n base cargada:', window.CONFIG);
}
